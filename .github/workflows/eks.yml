---
name: EKS Pipeline

on:
  push:
    branches:
      - main
    paths:
      - 3-eks-deployment/app/**
      - 3-eks-deployment/terraform/**
      - 3-eks-deployment/k8s/**

env:
  TF_VAR_aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  TF_VAR_aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_VAR_aws-region: ${{ secrets.AWS_REGION }}
  TF_VAR_project_name: 'eks-app'
  TF_VAR_environment: 'dev'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: 3-eks-deployment/app
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/nodejs-express-app:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/nodejs-express-app:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.10.5

      - name: Terraform Init
        working-directory: 3-eks-deployment/terraform
        run: terraform init

      - name: Select Terraform Workspace
        working-directory: 3-eks-deployment/terraform
        run: terraform workspace select dev || terraform workspace new dev

      - name: Terraform Validate
        working-directory: 3-eks-deployment/terraform
        run: terraform validate

      - name: Terraform Plan
        working-directory: 3-eks-deployment/terraform
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        working-directory: 3-eks-deployment/terraform
        run: terraform apply -auto-approve tfplan

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name eks-app-dev

      - name: Install AWS Load Balancer Controller
        run: |
          # Install helm if not present
          curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

          # Add and update eks helm repo
          helm repo add eks https://aws.github.io/eks-charts
          helm repo update

          # Get the role ARN
          ROLE_ARN=$(aws iam get-role --role-name eks-app-dev-aws-load-balancer-controller --query 'Role.Arn' --output text)

          # Install AWS Load Balancer Controller
          helm upgrade -i aws-load-balancer-controller eks/aws-load-balancer-controller \
            -n kube-system \
            --set clusterName=eks-app-dev \
            --set serviceAccount.create=true \
            --set serviceAccount.name=aws-load-balancer-controller \
            --set serviceAccount.annotations."eks\.amazonaws\.com/role-arn"="$ROLE_ARN" \
            --set region=${{ secrets.AWS_REGION }} \
            --set vpcId=$(terraform output -raw vpc_id) \
            --wait

          # Wait for the controller to be ready
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=aws-load-balancer-controller -n kube-system --timeout=120s

      - name: Deploy to Kubernetes
        run: |
          # First apply everything except ingress
          kubectl apply -f 3-eks-deployment/k8s/deployment.yaml
          kubectl apply -f 3-eks-deployment/k8s/service.yaml
          kubectl apply -f 3-eks-deployment/k8s/rbac.yaml
          
          # Wait for deployment to be ready
          kubectl rollout status deployment/nodejs-express-app

          # Now apply ingress
          kubectl apply -f 3-eks-deployment/k8s/ingress.yaml
          
          # Wait for ingress to get an address
          echo "Waiting for ingress to get an address..."
          timeout=300
          while [ $timeout -gt 0 ]; do
            if kubectl get ingress nodejs-express-app -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null | grep .; then
              echo "Ingress is ready!"
              break
            fi
            sleep 10
            timeout=$((timeout-10))
            echo "Still waiting... ($timeout seconds left)"
          done